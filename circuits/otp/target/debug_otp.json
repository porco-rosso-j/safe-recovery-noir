{"debug_symbols":[{"locations":{"0":[{"span":{"start":276,"end":318},"file":1},{"span":{"start":744,"end":782},"file":2}],"1":[{"span":{"start":324,"end":342},"file":1}],"2":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"3":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"4":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"5":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":529,"end":555},"file":10},{"span":{"start":122,"end":149},"file":20}],"6":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"7":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"8":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"9":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"10":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"11":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"12":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"13":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"14":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":716,"end":728},"file":10}],"15":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"16":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"17":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"18":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"19":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"20":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"21":[{"span":{"start":373,"end":429},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"22":[{"span":{"start":490,"end":511},"file":1}],"23":[{"span":{"start":490,"end":511},"file":1}],"24":[{"span":{"start":490,"end":511},"file":1}],"25":[{"span":{"start":490,"end":511},"file":1}],"26":[{"span":{"start":579,"end":630},"file":1},{"span":{"start":744,"end":782},"file":2}],"27":[{"span":{"start":579,"end":630},"file":1},{"span":{"start":744,"end":782},"file":2}],"29":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"30":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"31":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"32":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"33":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"34":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"35":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"36":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"37":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"38":[{"span":{"start":656,"end":712},"file":1},{"span":{"start":821,"end":872},"file":10},{"span":{"start":744,"end":782},"file":2}],"39":[{"span":{"start":730,"end":751},"file":1}],"40":[{"span":{"start":730,"end":751},"file":1}],"41":[{"span":{"start":730,"end":751},"file":1}],"42":[{"span":{"start":817,"end":865},"file":1},{"span":{"start":744,"end":782},"file":2}],"43":[{"span":{"start":817,"end":865},"file":1},{"span":{"start":744,"end":782},"file":2}],"44":[{"span":{"start":817,"end":865},"file":1},{"span":{"start":744,"end":782},"file":2}],"45":[{"span":{"start":817,"end":865},"file":1},{"span":{"start":744,"end":782},"file":2}],"46":[{"span":{"start":878,"end":904},"file":1}],"1.5":[{"span":{"start":565,"end":586},"file":0}],"1.6":[{"span":{"start":565,"end":586},"file":0}],"1.7":[{"span":{"start":565,"end":586},"file":0}],"1.8":[{"span":{"start":565,"end":586},"file":0}],"1.9":[{"span":{"start":565,"end":586},"file":0}],"1.10":[{"span":{"start":565,"end":586},"file":0}],"1.11":[{"span":{"start":565,"end":586},"file":0}],"1.12":[{"span":{"start":565,"end":586},"file":0}],"1.13":[{"span":{"start":565,"end":586},"file":0}],"1.14":[{"span":{"start":565,"end":586},"file":0}],"1.15":[{"span":{"start":565,"end":586},"file":0}],"1.16":[{"span":{"start":565,"end":586},"file":0}],"1.17":[{"span":{"start":565,"end":586},"file":0}],"1.18":[{"span":{"start":565,"end":586},"file":0}],"1.19":[{"span":{"start":565,"end":586},"file":0}],"1.20":[{"span":{"start":565,"end":586},"file":0}],"1.21":[{"span":{"start":565,"end":586},"file":0}],"1.22":[{"span":{"start":565,"end":586},"file":0}],"1.23":[{"span":{"start":565,"end":586},"file":0}],"1.24":[{"span":{"start":565,"end":586},"file":0}],"1.25":[{"span":{"start":565,"end":586},"file":0}],"1.26":[{"span":{"start":565,"end":586},"file":0}],"1.27":[{"span":{"start":565,"end":586},"file":0}],"1.28":[{"span":{"start":565,"end":586},"file":0}],"1.29":[{"span":{"start":565,"end":586},"file":0}],"1.30":[{"span":{"start":565,"end":586},"file":0}],"1.31":[{"span":{"start":565,"end":586},"file":0}],"1.32":[{"span":{"start":565,"end":586},"file":0}],"1.33":[{"span":{"start":565,"end":586},"file":0}],"1.34":[{"span":{"start":565,"end":586},"file":0}],"1.35":[{"span":{"start":565,"end":586},"file":0}],"1.36":[{"span":{"start":565,"end":586},"file":0}],"1.37":[{"span":{"start":565,"end":586},"file":0}],"1.38":[{"span":{"start":565,"end":586},"file":0}],"1.39":[{"span":{"start":565,"end":586},"file":0}],"1.40":[{"span":{"start":565,"end":586},"file":0}],"1.41":[{"span":{"start":565,"end":586},"file":0}],"1.42":[{"span":{"start":565,"end":586},"file":0}],"1.43":[{"span":{"start":565,"end":586},"file":0}],"1.44":[{"span":{"start":565,"end":586},"file":0}],"1.45":[{"span":{"start":565,"end":586},"file":0}],"1.46":[{"span":{"start":565,"end":586},"file":0}],"1.47":[{"span":{"start":565,"end":586},"file":0}],"1.48":[{"span":{"start":565,"end":586},"file":0}],"1.49":[{"span":{"start":565,"end":586},"file":0}],"1.50":[{"span":{"start":565,"end":586},"file":0}],"1.51":[{"span":{"start":565,"end":586},"file":0}],"1.52":[{"span":{"start":565,"end":586},"file":0}],"1.53":[{"span":{"start":565,"end":586},"file":0}],"1.54":[{"span":{"start":565,"end":586},"file":0}],"1.55":[{"span":{"start":565,"end":586},"file":0}],"1.56":[{"span":{"start":565,"end":586},"file":0}],"1.57":[{"span":{"start":565,"end":586},"file":0}],"1.58":[{"span":{"start":565,"end":586},"file":0}],"1.59":[{"span":{"start":565,"end":586},"file":0}],"1.60":[{"span":{"start":565,"end":586},"file":0}],"1.61":[{"span":{"start":565,"end":586},"file":0}],"1.62":[{"span":{"start":565,"end":586},"file":0}],"1.63":[{"span":{"start":565,"end":586},"file":0}],"1.64":[{"span":{"start":565,"end":586},"file":0}],"1.65":[{"span":{"start":565,"end":586},"file":0}],"1.66":[{"span":{"start":565,"end":586},"file":0}],"1.67":[{"span":{"start":565,"end":586},"file":0}],"1.68":[{"span":{"start":565,"end":586},"file":0}],"1.69":[{"span":{"start":565,"end":586},"file":0}],"1.70":[{"span":{"start":565,"end":586},"file":0}],"1.71":[{"span":{"start":565,"end":586},"file":0}],"1.72":[{"span":{"start":565,"end":586},"file":0}],"1.73":[{"span":{"start":565,"end":586},"file":0}],"1.74":[{"span":{"start":565,"end":586},"file":0}],"1.75":[{"span":{"start":565,"end":586},"file":0}],"1.76":[{"span":{"start":565,"end":586},"file":0}],"1.77":[{"span":{"start":565,"end":586},"file":0}],"1.78":[{"span":{"start":565,"end":586},"file":0}],"1.79":[{"span":{"start":565,"end":586},"file":0}],"1.80":[{"span":{"start":565,"end":586},"file":0}],"1.81":[{"span":{"start":565,"end":586},"file":0}],"1.82":[{"span":{"start":565,"end":586},"file":0}],"1.83":[{"span":{"start":565,"end":586},"file":0}],"1.84":[{"span":{"start":565,"end":586},"file":0}],"1.85":[{"span":{"start":565,"end":586},"file":0}]}}],"file_map":{"0":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod option;\nmod string;\nmod test;\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident \n#[oracle(println)]\nunconstrained fn println_oracle<T>(_input: T) {}\n\nunconstrained pub fn println<T>(input: T) {\n    println_oracle(input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(\n    _verification_key: [Field],\n    _proof: [Field],\n    _public_inputs: [Field],\n    _key_hash: Field,\n    _input_aggregation_object: [Field; N]\n) -> [Field; N] {}\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(_x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(_x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(_x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"1":{"source":"use dep::std;\n\nfn main(\n    root: pub Field,\n    nullifierHash: pub Field,\n    index: Field,\n    hash_path: [Field; 2],\n    otp: Field,\n    timestamp: pub Field // time step value. block.timestamp / 30\n) {\n    // _timestamp = timestamp - 1 : tp give delay\n\n    let mut leaf = std::hash::pedersen_hash([otp, timestamp]);\n    std::println(leaf);\n\n    let mut computed_root = std::merkle::compute_merkle_root(leaf, index, hash_path);\n\n    // retry with one-step-behind time step value\n    if (computed_root != root) {\n        let one_step_behind_tp = timestamp - 1;\n\n        leaf = std::hash::pedersen_hash([otp, one_step_behind_tp]);\n        computed_root = std::merkle::compute_merkle_root(leaf, index, hash_path);\n\n        assert(computed_root == root);\n    }\n\n    // Compute input note nullifier\n    let nullifier = std::hash::pedersen_hash([leaf, otp, timestamp]);\n    assert(nullifierHash == nullifier);\n}\n\n#[test]\nfn test_main() {\n    let root = 0x22fab3d87de44f44f3356520958d0684a5b327e37e0a0dde1a9f3f13c5a07f7e;\n\n    let nullifierHash = 0x2598862d49813e0f738ffb2b316339155fb2ec921ae17ab80c1997651cf6a568;\n\n    let index = 0;\n\n    let hash_path: [Field; 2] = [\n        0x137ad2247d8e089ca5dc03f9a70e5bc68392ac2916495968a80c35582c1a3c37,\n        0x072beba6c02ef2bc3bd7c391ab32e6f0d8ee0a178e95640966e1deb7df1c9f7a\n    ];\n\n    let otp = 412714;\n    let timestamp = 56847092; // or 1705412789\n\n    main(root, nullifierHash, index, hash_path, otp, timestamp);\n}\n","path":"/Users/jack-sw/Codes/safe/safe-recover/circuits/otp/src/main.nr"},"2":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"10":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"20":{"source":"impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n","path":"std/field.nr"}},"warnings":[]}