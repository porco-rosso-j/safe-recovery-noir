{"debug_symbols":[{"locations":{"0":[{"span":{"start":202,"end":236},"file":1},{"span":{"start":761,"end":799},"file":3}],"1":[{"span":{"start":242,"end":257},"file":1}],"2":[{"span":{"start":270,"end":279},"file":1}],"1.5":[{"span":{"start":566,"end":587},"file":0}],"1.6":[{"span":{"start":566,"end":587},"file":0}],"1.7":[{"span":{"start":566,"end":587},"file":0}],"1.8":[{"span":{"start":566,"end":587},"file":0}],"1.9":[{"span":{"start":566,"end":587},"file":0}],"1.10":[{"span":{"start":566,"end":587},"file":0}],"1.11":[{"span":{"start":566,"end":587},"file":0}],"1.12":[{"span":{"start":566,"end":587},"file":0}],"1.13":[{"span":{"start":566,"end":587},"file":0}],"1.14":[{"span":{"start":566,"end":587},"file":0}],"1.15":[{"span":{"start":566,"end":587},"file":0}],"1.16":[{"span":{"start":566,"end":587},"file":0}],"1.17":[{"span":{"start":566,"end":587},"file":0}],"1.18":[{"span":{"start":566,"end":587},"file":0}],"1.19":[{"span":{"start":566,"end":587},"file":0}],"1.20":[{"span":{"start":566,"end":587},"file":0}],"1.21":[{"span":{"start":566,"end":587},"file":0}],"1.22":[{"span":{"start":566,"end":587},"file":0}],"1.23":[{"span":{"start":566,"end":587},"file":0}],"1.24":[{"span":{"start":566,"end":587},"file":0}],"1.25":[{"span":{"start":566,"end":587},"file":0}],"1.26":[{"span":{"start":566,"end":587},"file":0}],"1.27":[{"span":{"start":566,"end":587},"file":0}],"1.28":[{"span":{"start":566,"end":587},"file":0}],"1.29":[{"span":{"start":566,"end":587},"file":0}],"1.30":[{"span":{"start":566,"end":587},"file":0}],"1.31":[{"span":{"start":566,"end":587},"file":0}],"1.32":[{"span":{"start":566,"end":587},"file":0}],"1.33":[{"span":{"start":566,"end":587},"file":0}],"1.34":[{"span":{"start":566,"end":587},"file":0}],"1.35":[{"span":{"start":566,"end":587},"file":0}],"1.36":[{"span":{"start":566,"end":587},"file":0}],"1.37":[{"span":{"start":566,"end":587},"file":0}],"1.38":[{"span":{"start":566,"end":587},"file":0}],"1.39":[{"span":{"start":566,"end":587},"file":0}],"1.40":[{"span":{"start":566,"end":587},"file":0}],"1.41":[{"span":{"start":566,"end":587},"file":0}],"1.42":[{"span":{"start":566,"end":587},"file":0}],"1.43":[{"span":{"start":566,"end":587},"file":0}],"1.44":[{"span":{"start":566,"end":587},"file":0}],"1.45":[{"span":{"start":566,"end":587},"file":0}],"1.46":[{"span":{"start":566,"end":587},"file":0}],"1.47":[{"span":{"start":566,"end":587},"file":0}],"1.48":[{"span":{"start":566,"end":587},"file":0}],"1.49":[{"span":{"start":566,"end":587},"file":0}],"1.50":[{"span":{"start":566,"end":587},"file":0}],"1.51":[{"span":{"start":566,"end":587},"file":0}],"1.52":[{"span":{"start":566,"end":587},"file":0}],"1.53":[{"span":{"start":566,"end":587},"file":0}],"1.54":[{"span":{"start":566,"end":587},"file":0}],"1.55":[{"span":{"start":566,"end":587},"file":0}],"1.56":[{"span":{"start":566,"end":587},"file":0}],"1.57":[{"span":{"start":566,"end":587},"file":0}],"1.58":[{"span":{"start":566,"end":587},"file":0}],"1.59":[{"span":{"start":566,"end":587},"file":0}],"1.60":[{"span":{"start":566,"end":587},"file":0}],"1.61":[{"span":{"start":566,"end":587},"file":0}],"1.62":[{"span":{"start":566,"end":587},"file":0}],"1.63":[{"span":{"start":566,"end":587},"file":0}],"1.64":[{"span":{"start":566,"end":587},"file":0}],"1.65":[{"span":{"start":566,"end":587},"file":0}],"1.66":[{"span":{"start":566,"end":587},"file":0}],"1.67":[{"span":{"start":566,"end":587},"file":0}],"1.68":[{"span":{"start":566,"end":587},"file":0}],"1.69":[{"span":{"start":566,"end":587},"file":0}],"1.70":[{"span":{"start":566,"end":587},"file":0}],"1.71":[{"span":{"start":566,"end":587},"file":0}],"1.72":[{"span":{"start":566,"end":587},"file":0}],"1.73":[{"span":{"start":566,"end":587},"file":0}],"1.74":[{"span":{"start":566,"end":587},"file":0}],"1.75":[{"span":{"start":566,"end":587},"file":0}],"1.76":[{"span":{"start":566,"end":587},"file":0}],"1.77":[{"span":{"start":566,"end":587},"file":0}],"1.78":[{"span":{"start":566,"end":587},"file":0}],"1.79":[{"span":{"start":566,"end":587},"file":0}],"1.80":[{"span":{"start":566,"end":587},"file":0}],"1.81":[{"span":{"start":566,"end":587},"file":0}],"1.82":[{"span":{"start":566,"end":587},"file":0}],"1.83":[{"span":{"start":566,"end":587},"file":0}],"1.84":[{"span":{"start":566,"end":587},"file":0}],"1.85":[{"span":{"start":566,"end":587},"file":0}]}}],"file_map":{"0":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod option;\nmod string;\nmod test;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident \n#[oracle(println)]\nunconstrained fn println_oracle<T>(_input: T) {}\n\nunconstrained pub fn println<T>(input: T) {\n    println_oracle(input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(_verification_key : [Field], _proof : [Field], _public_inputs : [Field], _key_hash : Field, _input_aggregation_object : [Field; N]) -> [Field; N] {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(_x: T) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(_x : Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(_x : T) -> Field {}\n\n\npub fn wrapping_add<T>(x : T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x : T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x : T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n/// Shift-left x by y bits\n/// If the result overflow the bitsize; it does not fail and returns 0 instead\n#[builtin(wrapping_shift_left)]\npub fn wrapping_shift_left<T>(_x : T, _y: T) -> T {}\n","path":"std/lib.nr"},"1":{"source":"use dep::std;\n\n// credit: https://github.com/WillSchiller/eth-paris-23/tree/main/noir-zk\n\nfn main(preimage: [Field;10], hash: pub Field) {\n    // let h = std::hash::keccak256(preimage, 10);\n    let h = std::hash::pedersen_hash(preimage);\n    std::println(h);\n    assert(h == hash);\n}\n\n#[test]\nfn test_main() {\n    // let preimage: [u8; 10] = [110,121,97,110,107,111,49,50,51,52];\n    // let hash: [u8; 32]= [225,173,175,137,173,67,141,144,36,144,135,233,78,113,0,209,182,100,33,124,105,196,60,128,126,95,101,116,145,211,6,100];\n    let preimage: [Field; 10] = [116, 101, 115, 116, 0, 0, 0, 0, 0, 0];\n    let hash: Field = 0x15a52a0d6f0eedd4f63d72cb8275ae6826dcd005eafee769658486a2d3c09e1d;\n    main(preimage, hash);\n }\n","path":"/Users/jack-sw/Codes/safe/safe-recover/circuits/recoveries/secret/src/main.nr"},"3":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input : [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input : [Field; N], separator : u32) -> PedersenPoint {\n  let values = __pedersen_commitment_with_separator(input, separator);\n  PedersenPoint {\n     x: values[0],\n     y: values[1],\n  }\n}\n\npub fn pedersen_hash<N>(input : [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input : [Field; N], _separator : u32) -> Field {}\n\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n    \n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"}},"warnings":[]}