{"debug_symbols":[{"locations":{"0":[{"span":{"start":202,"end":236},"file":1},{"span":{"start":744,"end":782},"file":3}],"1":[{"span":{"start":273,"end":282},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\n\n// credit: https://github.com/WillSchiller/eth-paris-23/tree/main/noir-zk\n\nfn main(preimage: [Field;10], hash: pub Field) {\n    // let h = std::hash::keccak256(preimage, 10);\n    let h = std::hash::pedersen_hash(preimage);\n    // std::println(h);\n    assert(h == hash);\n}\n\n#[test]\nfn test_main() {\n    // let preimage: [u8; 10] = [110,121,97,110,107,111,49,50,51,52];\n    // let hash: [u8; 32]= [225,173,175,137,173,67,141,144,36,144,135,233,78,113,0,209,182,100,33,124,105,196,60,128,126,95,101,116,145,211,6,100];\n    let preimage: [Field; 10] = [116, 101, 115, 116, 0, 0, 0, 0, 0, 0];\n    let hash: Field = 0x2aab9d32d3e979cac6110e8f2104a1443301e40565dc731afaaa5833b08e5498;\n    main(preimage, hash);\n}\n","path":"/Users/jack-sw/Codes/safe/safe-recover/circuits/secret/src/main.nr"},"3":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"}},"warnings":[]}